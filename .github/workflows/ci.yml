name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ansible ansible-lint yamllint molecule[docker]
          
      - name: Install Galaxy dependencies
        run: ansible-galaxy collection install -r requirements.yml
        
      - name: Run YAML Lint
        run: yamllint .
        
      - name: Run Ansible Lint
        run: ansible-lint
        
      - name: Run syntax check
        run: ansible-playbook main.yml --syntax-check

  test-linux:
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      matrix:
        distro:
          - ubuntu2204
          - fedora38
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ansible molecule[docker] docker
          
      - name: Install Galaxy dependencies
        run: ansible-galaxy collection install -r requirements.yml
        
      - name: Run Molecule tests
        run: molecule test
        env:
          MOLECULE_DISTRO: ${{ matrix.distro }}

  test-macos:
    runs-on: macos-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Ansible
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install ansible
          
      - name: Install Galaxy dependencies
        run: ansible-galaxy collection install -r requirements.yml
        
      - name: Run syntax check
        run: ansible-playbook main.yml --syntax-check
        
      - name: Test macOS playbook (check mode)
        run: |
          ansible-playbook main.yml -i "localhost," -c local --check \
            -e "configure_macos=true" \
            -e "configure_dotfiles=true" \
            -e "GITHUB_USERNAME=test-user"
            
      - name: Test dotfiles only (actual run)
        run: |
          ansible-playbook main.yml -i "localhost," -c local \
            --tags dotfiles \
            -e "configure_dotfiles=true" \
            -e "GITHUB_USERNAME=test-user"

  security-scan:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
