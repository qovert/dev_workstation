---
- name: Development Workstation Setup
  hosts: all
  gather_facts: true
  strategy: linear
  serial: 1
  become: yes

  vars_files:
    - default.config.yml

  vars:
    # Global retry settings
    retry_count: 3
    retry_delay: 5

    # Performance settings
    ansible_python_interpreter: auto_silent

    # Connection optimizations
    ansible_ssh_pipelining: true
    ansible_ssh_control_persist: 300s

    # Cache settings
    fact_caching: jsonfile
    fact_caching_connection: /tmp/ansible_facts_cache
    fact_caching_timeout: 3600

  pre_tasks:
    - name: Debug OS information
      ansible.builtin.debug:
        msg:
          - "ansible_os_family: {{ ansible_os_family }}"
          - "ansible_distribution: {{ ansible_distribution }}"
          - "ansible_distribution_major_version: {{ ansible_distribution_major_version }}"
          - "ansible_system: {{ ansible_system }}"

    - name: Set OS-specific facts
      ansible.builtin.set_fact:
        is_macos: "{{ ansible_system == 'Darwin' }}"
        is_fedora: >-
          {{ ansible_distribution == 'Fedora' or
             ansible_distribution == 'RedHat' or
             ansible_distribution == 'CentOS' }}
        is_debian: >-
          {{ ansible_distribution == 'Debian' or
             ansible_distribution == 'Ubuntu' }}
        is_linux: "{{ ansible_system == 'Linux' }}"

    - name: Check if Homebrew is already installed (macOS)
      ansible.builtin.stat:
        path: "{{ '/opt/homebrew/bin/brew' if ansible_machine == 'arm64' else '/usr/local/bin/brew' }}"
      register: homebrew_installed
      when: is_macos
      become: no

  roles:
    - role: elliotweiser.osx-command-line-tools
      when:
        - is_macos
        - configure_macos | default(false)
    - role: geerlingguy.homebrew
      become: no
      when:
        - is_macos
        - configure_macos | default(false)
        - not (homebrew_installed.stat.exists | default(false))
    - role: geerlingguy.mas
      become: no
      when:
        - is_macos
        - configure_macos | default(false)
        - configure_mas | default(false)
        - not (homebrew_installed.stat.exists | default(false))

  tasks:
    - name: Install Homebrew packages (macOS)
      when:
        - is_macos
        - configure_macos | default(false)
        - homebrew_installed.stat.exists | default(false)
      block:
        - name: Check system Ruby version
          ansible.builtin.command: ruby --version
          register: ruby_version
          failed_when: false
          changed_when: false
          become: no

        - name: Debug Ruby version
          ansible.builtin.debug:
            msg: "System Ruby version: {{ ruby_version.stdout | default('Not found') }}"

        - name: Fix Homebrew permissions for current user
          ansible.builtin.file:
            path: "{{ item }}"
            owner: "{{ ansible_user_id }}"
            group: admin
            mode: '0755'
            state: directory
          loop:
            - "{{ '/opt/homebrew/var' if ansible_machine == 'arm64' else '/usr/local/var' }}"
            - "{{ '/opt/homebrew/var/homebrew' if ansible_machine == 'arm64' else '/usr/local/var/homebrew' }}"
            - "{{ '/opt/homebrew/var/homebrew/locks' if ansible_machine == 'arm64' else '/usr/local/var/homebrew/locks' }}"
            - "{{ '/opt/homebrew/Library' if ansible_machine == 'arm64' else '/usr/local/Library' }}"
            - "{{ '/opt/homebrew/Library/Homebrew' if ansible_machine == 'arm64' else '/usr/local/Library/Homebrew' }}"
          become: yes
          ignore_errors: yes

        - name: Ensure Homebrew can write to its directories
          ansible.builtin.command: |
            sudo chown -R {{ ansible_user_id }}:admin {{ '/opt/homebrew' if ansible_machine == 'arm64' else '/usr/local' }}
          become: yes
          ignore_errors: yes

        - name: Install Homebrew packages
          community.general.homebrew:
            name: "{{ homebrew_installed_packages }}"
            state: present
          become: no
          when: homebrew_installed_packages is defined

        - name: Install Homebrew cask applications
          community.general.homebrew_cask:
            name: "{{ homebrew_cask_apps }}"
            state: present
          become: no
          when: homebrew_cask_apps is defined

        - name: Add Homebrew taps
          community.general.homebrew_tap:
            name: "{{ item }}"
            state: present
          loop: "{{ homebrew_taps }}"
          become: no
          when: homebrew_taps is defined

        - name: Install MAS (Mac App Store CLI)
          community.general.homebrew:
            name: mas
            state: present
          become: no
          when: configure_mas | default(false)

        - name: Install Mac App Store applications
          community.general.mas:
            id: "{{ item.id }}"
            state: present
          loop: "{{ mas_installed_apps }}"
          become: no
          when:
            - configure_mas | default(false)
            - mas_installed_apps is defined

    - name: Debug OS-specific task execution
      ansible.builtin.debug:
        msg:
          - "Will execute macOS tasks: {{ is_macos and (configure_macos | default(false)) }}"
          - >-
            Will execute Fedora/RHEL tasks:
            {{ (is_fedora or ansible_os_family == 'RedHat') and
               (configure_linux | default(false)) }}
          - >-
            Will execute Debian/Ubuntu tasks:
            {{ (is_debian or ansible_os_family == 'Debian') and
               (configure_linux | default(false)) }}
          - "Will execute dotfiles tasks: {{ configure_dotfiles | default(false) }}"
      tags: always

    - name: Load dotfiles tasks
      ansible.builtin.include_tasks: tasks/dotfiles.yml
      when: configure_dotfiles | default(false)
      tags: dotfiles

    - name: Load macOS defaults tasks
      ansible.builtin.include_tasks: tasks/mac.defaults.yml
      when:
        - is_macos
        - configure_macos | default(false)
      tags:
        - macos
        - defaults

    - name: Load Fedora/RHEL tasks
      ansible.builtin.include_tasks: tasks/fedora.wkstn.yml
      when:
        - is_fedora or ansible_os_family == "RedHat"
        - configure_linux | default(false)
      tags:
        - linux
        - fedora

    - name: Load Debian/Ubuntu tasks
      ansible.builtin.include_tasks: tasks/deb.wkstn.yml
      when:
        - is_debian or ansible_os_family == "Debian"
        - configure_linux | default(false)
      tags:
        - linux
        - debian
